generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Like {
  id        String   @id @default(cuid())
  goalId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  goal      Goal     @relation(fields: [goalId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  goalId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  goal      Goal     @relation(fields: [goalId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id    String              @id @default(cuid())
  title String
  value String
  category String @default("")
  users User[]
  goals Goal[]
}

model Step {
  id          String   @id @default(cuid())
  isCompleted Boolean  @default(false)
  title       String
  description String
  goalId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  goal        Goal     @relation(fields: [goalId], references: [id])
}

model Goal {
  id          String    @id @default(cuid())
  userId      String
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  estimatedCompletionDate DateTime @default(now())
  title       String    @db.VarChar(255)
  updatedAt   DateTime  @updatedAt
  description String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  categories Category[]
  likes       Like[]
  steps       Step[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  username      String?             @unique
  accounts      Account[]
  categories    Category[]
  comments      Comment[]
  goals         Goal[]
  likes         Like[]
  sessions      Session[]
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
